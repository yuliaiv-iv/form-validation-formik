{"version":3,"sources":["components/FormInput.js","components/CheckBox.js","components/SubmitForm.js","utils/api.js","App.js","reportWebVitals.js","index.js"],"names":["FormInput","props","useField","field","meta","htmlFor","name","className","touched","error","CheckBox","type","href","SubmitForm","useState","isSubmitingError","setIsSubmitingError","isSubmitingButton","setIsSubmitingButton","initialValues","email","phone","text","terms","validationSchema","Yup","min","max","required","matches","oneOf","onSubmit","values","setSubmitting","resetForm","fetch","method","body","JSON","stringify","headers","postForm","then","setTimeout","alert","catch","err","console","log","formik","noValidate","placeholder","isSubmitting","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ac548dc.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useField } from 'formik';\r\n\r\nconst FormInput = ({ ...props }) => {\r\n\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label htmlFor={props.name} className=\"form__field\">\r\n        <input className={`form__input ${meta.touched && meta.error ? \"form__input_error\" : \"\"}`} {...field} {...props} />\r\n        {meta.touched && meta.error && <span className=\"form__item-error\">{meta.error}</span>}\r\n      </label>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FormInput;\r\n","import React from 'react';\r\nimport { useField } from 'formik';\r\n\r\nconst CheckBox = ({ ...props }) => {\r\n\r\n  const [field, meta] = useField({ ...props, type: \"checkbox\" });\r\n  return (\r\n    <>\r\n      <label className=\"form__field\">\r\n        <input className=\"form__input form__input_checkbox\" {...field} {...props} type=\"checkbox\" />\r\n        <span className=\"form__checkbox-text\">\r\n          Согласен с <a className=\"form__checkbox-accent\" href='#'>офертой</a>\r\n        </span>\r\n      </label>\r\n      {meta.touched && meta.error && <span className=\"form__item-error\">{meta.error}</span>}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CheckBox;\r\n","import React, { useState } from 'react';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport FormInput from './FormInput';\r\nimport CheckBox from './CheckBox';\r\nimport { postForm } from '../utils/api';\r\n\r\nfunction SubmitForm() {\r\n\r\n  const phoneRegExp = /^(\\+?\\d{0,4})?\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{4}\\)?)?$/;\r\n  const [isSubmitingError, setIsSubmitingError] = useState('');\r\n  const [isSubmitingButton, setIsSubmitingButton] = useState('Отправить форму');\r\n\r\n  return (\r\n    <section className=\"form\">\r\n      <h3 className=\"form__title\">форма</h3>\r\n      <p className=\"form__paragraph\">\r\n        Заполняя эту форму, вы становитесь частью проекта</p>\r\n      <Formik\r\n        initialValues={{\r\n          name: '',\r\n          email: '',\r\n          phone: '',\r\n          text: '',\r\n          terms: false\r\n        }}\r\n\r\n        validationSchema={Yup.object({\r\n          name: Yup.string()\r\n            .min(3, \"Имя должно быть не короче 3 символов*\")\r\n            .max(60, \"Имя не должно быть длиннее 50 символов*\")\r\n            .required(\"Обязательное поле*\"),\r\n          email: Yup.string()\r\n            .email(\"Не действительный адрес электронной почты*\")\r\n            .required(\"Обязательное поле*\"),\r\n          phone: Yup.string()\r\n            .matches(phoneRegExp, \"Номер телефона недействителен*\")\r\n            .required(\"Обязательное поле*\"),\r\n          text: Yup.string()\r\n            .min(10, \"Стих должен быть не короче 10 символов*\")\r\n            .max(500, \"Стих не должен быть длиннее 500 символов*\")\r\n            .required(\"Обязательное поле*\"),\r\n          terms: Yup.bool()\r\n            .oneOf([true], \"Требуется принять условия*\")\r\n        })}\r\n\r\n        onSubmit={(values, { setSubmitting, resetForm }) => {\r\n          postForm(values)\r\n            .then(() => {\r\n              setTimeout(() => {\r\n                setSubmitting(false);\r\n                setIsSubmitingError('');\r\n                setIsSubmitingButton('Ура, форма отправлена!');\r\n                resetForm('');\r\n                alert((JSON.stringify(values, null, 2)));\r\n              }, 1500)\r\n            })\r\n            .then(() => {\r\n              setTimeout(() => {\r\n                setIsSubmitingButton('Отправить другую форму');\r\n              }, 3000)\r\n            })\r\n            .catch((err) => {\r\n              setTimeout(() => {\r\n                console.log(err);\r\n                setIsSubmitingError('Упс, что-то пошло не так, попробуйте ещё раз!');\r\n                resetForm('');\r\n              }, 1500)\r\n            })\r\n        }}\r\n      >\r\n        {formik => (\r\n          <Form className=\"form__fields\"\r\n            noValidate >\r\n            <FormInput\r\n              name=\"name\"\r\n              type=\"text\"\r\n              placeholder=\"Имя и фамилия автора\"\r\n            />\r\n            <FormInput\r\n              name=\"phone\"\r\n              type=\"tel\"\r\n              placeholder=\"Телефон  +7 XXX XXX XX XX\"\r\n            />\r\n            <FormInput\r\n              name=\"email\"\r\n              type=\"email\"\r\n              placeholder=\"Почта\"\r\n            />\r\n            <FormInput\r\n              name=\"text\"\r\n              type=\"text\"\r\n              placeholder=\"Стихи\"\r\n            />\r\n            <CheckBox\r\n              name=\"terms\"\r\n            />\r\n            <button className=\"form__button button\"\r\n              type=\"submit\"\r\n            >\r\n              {formik.isSubmitting ? 'Форма отправляеться...' : `${isSubmitingButton}`}\r\n            </button>\r\n            <span className=\"form__button-error\">{isSubmitingError}</span>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </section >\r\n  )\r\n}\r\nexport default SubmitForm;\r\n\r\n","export const postForm = (values) => {\r\n  return fetch('url', {\r\n    method: 'POST',\r\n    body: JSON.stringify({ values }),\r\n    headers: {\r\n      'Content-Type': 'application/json; charset=UTF-8'\r\n    }\r\n  })\r\n    // .then((res) => {\r\n    //   if (res.ok) {\r\n    //     return res.json()\r\n    //   }\r\n    //   return Promise.reject(`Ошибка: ${res.status}`);\r\n    // })\r\n}\r\n","import React from 'react';\nimport SubmitForm from './components/SubmitForm';\n\nfunction App() {\n\n  return (\n    <SubmitForm />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}